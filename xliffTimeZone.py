#!/usr/bin/env python
# coding=UTF-8
"""
Xliff Time Zone Database's translation tool and files, automated by Google Translate API.
"""

__author__ = u"Matteo Bertamini, Luca D'Inc√†"
__copyright__ = u"Copyright 2017, Belka"
__license__ = u"MIT"
__maintainer__ = u"Matteo Bertamini"
__email__ = u"matteo@belka.us"

import sys, os.path, getopt
from language_tags import tags
from googleapiclient.discovery import build
import psycopg2
from xml.etree.ElementTree import Element, SubElement, Comment, ElementTree
# from ElementTree_pretty import prettify


def main(argv):
    developerKey = os.environ.get('developerKey', '')
    helpOutput = 'xliffTimeZone.py [-o <outputfile>] [-k <developerkey>] <langtag>'
    outputfile = ''
    tag = ''

    #
    # 1 Params check and normalization
    #
    try:
        opts, args = getopt.getopt(argv, "ho:k:", ["ofile=", "developerKey="])
    except getopt.GetoptError:
        print helpOutput
        sys.exit(2)

    if (len(args) != 1):
        print helpOutput
        sys.exit(2)
    else:
        tag = tags.tag(args[0])

    for opt, arg in opts:
        if opt == '-h':
            print helpOutput
            sys.exit()
        elif opt in ("-o", "--ofile"):
            outputfile = os.path.split(arg)
        elif opt in ("-k", "--devkey"):
            developerKey = arg

    if not developerKey:
        print 'A developerKey shell variable or, a -k argument, must be defined'
        sys.exit(2)

    if outputfile == '':
        outputfile = (os.path.join(os.getcwd(), 'translations'), 'timezones.{}.xlf'.format(tag))
    else:
        if outputfile[0] == '':
            outputfile = (os.path.join(os.getcwd(), 'translations'), '{}.{}.xlf'.format(outputfile[1],tag))
        else:
            print 'only a filename without any path can be specified. The file will be written into the translations folder.'
            print helpOutput
            sys.exit(2)

    if not os.path.isdir(outputfile[0]):
        print 'Output path is incorrect: {} is not a dir'.format(outputfile[0])
        sys.exit(2)

    # building the final path
    outputfile = os.path.join(outputfile[0], outputfile[1])

    if not tag.valid:
        print 'Invalid lang tag: {}'.format(tag)
        print helpOutput
        sys.exit(2)


    #
    # 2 translation
    #
    conn_string = "host='pg' dbname='postgres' user='postgres' password='mysecretpassword'"
    conn = psycopg2.connect(conn_string)
    cursor = conn.cursor()

    print("Database Connected, querying the timezones...")

    root = Element('xliff', {"version": "1.2", "xmlns": "urn:oasis:names:tc:xliff:document:1.2"})
    comment = Comment('Generated by Belka - www.belka.us')
    root.append(comment)

    file = SubElement(root, 'file',
                      {'source-language': '{}'.format('en'), 'datatype': 'plaintext', 'original': 'postgresql'})

    body = SubElement(file, 'body')

    #
    # 2 reading timezones and translating it
    #
    cursor.execute("SELECT tz.name AS measure FROM pg_timezone_names() tz;")
    timezones = cursor.fetchall()

    service = build('translate', 'v2', developerKey=developerKey)
    translation = service.translations()

    for timezone in timezones:
        print "Translating: {}".format(timezone[0])

        # parse string
        normalizedLine = unicode(timezone[0].replace(u'_', u' ').replace(u'"', u''))
        lineTranslated = u''

        sublines = normalizedLine.split(u'/')

        for word in sublines:
            wordTranslated = translation.list(
                source='en',
                target=tag,
                q=[word]
            ).execute()

            lineTranslated += unicode(u'/{}'.format(wordTranslated['translations'][0]['translatedText']))

        lineTranslated = unicode(lineTranslated.strip('/'))

        transUnit = SubElement(body, u'trans-unit', {'id': u'timezone_{}'.format(timezone[0])})
        source = SubElement(transUnit, 'source')
        source.text = u'{}'.format(timezone[0])
        target = SubElement(transUnit, 'target')
        target.text = u'{}'.format(lineTranslated)

    print "Translated. Writing xliff..."

    ElementTree(root).write(outputfile)

    print ""
    print "Done."


if __name__ == "__main__":
   main(sys.argv[1:])
